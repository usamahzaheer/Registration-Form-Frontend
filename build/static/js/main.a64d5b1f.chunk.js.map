{"version":3,"sources":["components/login.js","components/signup.js","components/Admin.js","components/Logout.js","App.js","serviceWorker.js","index.js"],"names":["Login","localStorage","getItem","state","name","password","nameError","passwordError","loggedIn","this","includes","length","setState","valid","setItem","alert","to","className","placeholder","type","onChange","event","target","value","style","color","onClick","submit","Component","Signup","firstname","lastname","Admin","fontSize","fontWeight","Logout","removeItem","App","border","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a64d5b1f.chunk.js","sourcesContent":["// i did the basic form validation rage\r\n// Token authetication using local storage\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\"\r\nexport default class Login extends Component {\r\n    // state objects are initialized inside constructor\r\n    constructor() {\r\n        super();\r\n        const token = localStorage.getItem(\"token\")\r\n        let loggedIn = true\r\n        if(token== null){\r\n            loggedIn = false\r\n        }\r\n        this.state = {\r\n            // initializing state of the component  using js objects which store informattion about the component\r\n            name: \"\",\r\n            password: \"\",\r\n            nameError: \"\",\r\n            passwordError: \"\",\r\n            loggedIn:\"\"\r\n        }\r\n    }\r\n\r\n// valid func for applying basic validation rules against user input\r\n    valid() {\r\n        // if \"name\" object does'nt have \"@\" in his text & password lenght is less 6 then \r\n        if (!this.state.name.includes(\"@\") && this.state.password.length < 6) {\r\n            // then using setState property nameerror and password error object has error message value it\r\n            this.setState(\r\n                { nameError: \"invalid Eame\", passwordError: \"password lenght should be more than 5\" }\r\n            )\r\n        }\r\n        // if only \"name\" does'nt have @ char, set only value for nameError \r\n        else if (!this.state.name.includes(\"@\")) {\r\n            this.setState({ nameError: \"Invalid Email\" })\r\n        }\r\n        else if (this.state.password.length < 5) {\r\n            this.setState({ passwordError: \"password lenght should be more than 5\" })\r\n        }\r\n        else {\r\n            // return ture if all sorted\r\n            return true;\r\n        }\r\n    }\r\n    submit()\r\n    {\r\n      this.setState({nameError:\"\", passwordError:\"\"})\r\n      // to authenticate using local storage i set mock email & password. so you will only logged in using these values. \r\n    //  although valid function have conditions to check basic validation. \r\n        if(this.valid() && this.state.name===\"some@gmail.com\" && this.state.password === \"12345678\" )\r\n        {  \r\n            //comment command cntl k + c\r\n            //for authentication purpose we have to store token in local storage\r\n            localStorage.setItem(\"token\", \"ieihfiwerhfihiwirihiu\")\r\n             this.setState(\r\n          {\r\n              loggedIn:true\r\n          }\r\n      )\r\n            alert(\"form has been submited\")\r\n        }\r\n     \r\n    }\r\n    render() {\r\n        if(this.state.loggedIn){\r\n            // redirected to admin component untill we are logged in\r\n            return <Redirect to={\"/Admin\"} />\r\n        }\r\n        return (\r\n            <div className=\"form\">\r\n                <h1>Login</h1>\r\n                <div className=\"label\"><label >Email Address</label></div>\r\n                {/* on changing the input field by user, that text value will be store in \"name\" object which store in constructor func using setstate property */}\r\n                <input placeholder=\"Enter Email\" type=\"text\" onChange={(event) => { this.setState({ name: event.target.value }) }} />\r\n               {/* eror message will displayed depending on value store in nameError object */}\r\n                <p style={{ color: \"red\" }}>{this.state.nameError}</p>\r\n               <div className=\"label\"><label>Password</label></div> \r\n               {/* same as above input field except object which is password in this case */}\r\n                <input placeholder=\"Enter Password\" type=\"password\" onChange={(event) => { this.setState({ password: event.target.value }) }} />\r\n                <p style={{ color: \"red\" }}>{this.state.passwordError}</p>\r\n                {/* on click submit button submit() fuction will call, it's define above */}\r\n                <button onClick={() => this.submit()}>Submit</button>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}","// it has only validation rules similar to login file \r\n// only diff is that it has only few extra input fields  so therefore not commenting in this file\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class Signup extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            password: \"\",\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            nameError: \"\",\r\n            passwordError: \"\"\r\n        }\r\n    }\r\n\r\n    valid() {\r\n        if (!this.state.name.includes(\"@\") && this.state.password.length < 5) {\r\n            this.setState(\r\n                { nameError: \"invalid Eame\", passwordError: \"password lenght should be more than 5\" }\r\n            )\r\n        }\r\n        else if (!this.state.name.includes(\"@\")) {\r\n            this.setState({ nameError: \"Invalid Email\" })\r\n        }\r\n        else if (this.state.password.length < 5) {\r\n            this.setState({ passwordError: \"password lenght should be more than 5\" })\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    submit() {\r\n        this.setState({ nameError: \"\", passwordError: \"\" })\r\n        if (this.valid()) {\r\n            alert(\"You are successfully signed up\");\r\n\r\n        }\r\n    }\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <h1>Sign UP</h1>\r\n                <input type=\"text\" placeholder=\"Firstname\" onChange={(event) => { this.setState({ firstname: event.target.value }) }} /><br></br>\r\n                <input type=\"text\" placeholder=\"Lastname\" onChange={(event) => { this.setState({ lastname: event.target.value }) }} /><br></br>\r\n                <input type=\"text\" placeholder=\"Enter Email\" onChange={(event) => { this.setState({ name: event.target.value }) }} />\r\n                <p style={{ color: \"red\" }}>{this.state.nameError}</p>\r\n                <input type=\"password\" placeholder=\"Enter Password\" onChange={(event) => { this.setState({ password: event.target.value }) }} />\r\n                <p style={{ color: \"red\" }}>{this.state.passwordError}</p>\r\n                <button onClick={() => this.submit()}>Submit</button>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport {Link, Redirect} from 'react-router-dom';\r\n\r\nexport default class Admin extends Component {\r\n    constructor(){\r\n        super()\r\n        // taken var get value taken string which is stored in \r\n        const token = localStorage.getItem(\"token\")\r\n        // declaring and initializing loggedin var\r\n        let loggedIn = true\r\n        // if token value have null, it means user does not sign in. it will not let user to stay into admin component \r\n        if(token== null){\r\n            // so loggedin var have false value in it\r\n            loggedIn = false\r\n        }\r\n        else\r\n        // else it remain true\r\n            this.state = { loggedIn}\r\n        }\r\n    \r\n    render() \r\n    {\r\n        // if loggedin have false value so redirect page to signin component\r\n        if(this.state.loggedIn=== false)\r\n        {\r\n        return <Redirect to = {\"/sign-in\"} />\r\n        }\r\n        return (\r\n            <div className=\"form\">\r\n                <h1 style={{color:\"black\", fontSize:\"60px\"}}>You'are logged in</h1>\r\n                {/* add logout link button, on click it will redrict to logout component */}\r\n                <Link  to={\"/Logout\"}><button style={{fontWeight:\"bold\"}}>Logout</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","// add logout component so that we can clear the token string value in local storage\r\n// import link so that we can get back to signin again if we want\r\nimport React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Logout extends Component {\r\n    constructor(){\r\n        super()\r\n        // clear token value from local storage.. now app will not load if we will go to admin page\r\n        localStorage.removeItem(\"token\")\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                 <h1 style={{color:\"black\", fontSize:\"60px\"}}>You're logged out</h1>\r\n                 {/* add button to link into sign in file */}\r\n                 <Link  to={\"/sign-in\"}><button style={{fontWeight:\"bold\"}}>Signin in again</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Signup from './components/signup';\nimport Admin from './components/Admin';\nimport Logout from './components/Logout';\n\n\nfunction App() {\n  return (<Router>\n    <div >\n      <div className=\"navbar\">\n        {/* Add routes to render the component against the respectives links */}\n      <Link className=\"link\" to={\"/Admin\"}><button>Admin</button> </Link>\n      <Link className=\"link\" to={\"/sign-in\"}><button>Login</button> </Link>\n      <Link className=\"link\" to={\"/sign-up\"}><button>Sign up</button></Link>\n      </div>\n      <div style={{border:\"1px solid black\"}}></div>\n       {/* wrapping routes inside switch to tell react router to load only one route at a time, exact property change the default behavior */}\n      <Switch>\n        <Route exact path='/' component={Login} />\n        <Route path=\"/sign-in\" component={Login} />\n        <Route path=\"/sign-up\" component={Signup} />\n        <Route path=\"/Admin\" component={Admin} />\n        <Route path=\"/Logout\" component={Logout} />\n        \n      </Switch>\n\n    </div>\n  </Router>\n  );\n}\n// exporting app, it will be import by index.js where react components insert into the DOM using ReactDOM\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}