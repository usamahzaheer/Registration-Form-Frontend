{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-app\\\\src\\\\components\\\\login.js\";\n// i did the basic form validation rage\n// Token authetication using local storage\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nexport default class Login extends Component {\n  // state objects are initialized inside constructor\n  constructor() {\n    super();\n    const token = localStorage.getItem(\"token\");\n    let loggedIn = true;\n\n    if (token == null) {\n      loggedIn = false;\n    }\n\n    this.state = {\n      // initializing state of the component  using js objects which store informattion about the component\n      name: \"\",\n      password: \"\",\n      nameError: \"\",\n      passwordError: \"\",\n      loggedIn: \"\"\n    };\n  } // valid func for applying basic validation rules against user input\n\n\n  valid() {\n    // if \"name\" object does'nt have \"@\" in his text & password lenght is less 6 then \n    if (!this.state.name.includes(\"@\") && this.state.password.length < 6) {\n      // then using setState property nameerror and password error object has error message value it\n      this.setState({\n        nameError: \"invalid Eame\",\n        passwordError: \"password lenght should be more than 5\"\n      });\n    } // if only \"name\" does'nt have @ char, set only value for nameError \n    else if (!this.state.name.includes(\"@\")) {\n        this.setState({\n          nameError: \"Invalid Email\"\n        });\n      } else if (this.state.password.length < 5) {\n        this.setState({\n          passwordError: \"password lenght should be more than 5\"\n        });\n      } else {\n        // return ture if all sorted\n        return true;\n      }\n  }\n\n  submit() {\n    this.setState({\n      nameError: \"\",\n      passwordError: \"\"\n    }); // to authenticate using local storage i set mock email & password. so you will only logged in using these values. \n    //  although valid function have conditions to check basic validation. \n\n    if (this.valid()) {\n      {\n        console.warn(\"state\", this.state);\n        let request = {\n          email: this.state.name,\n          password: this.state.password\n        };\n        console.log(request);\n        fetch('http://localhost:3002/api/users/login', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(request)\n        }).then(result => {\n          result.json().then(resp => {\n            console.log(resp.token);\n          });\n        });\n      }\n      alert(\"form has been submited\");\n    }\n  }\n\n  render() {\n    if (this.state.loggedIn) {\n      // redirected to admin component untill we are logged in\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/Admin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 40\n      }\n    }, \"Email Address\")), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Enter Email\",\n      type: \"text\",\n      onChange: event => {\n        this.setState({\n          name: event.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, this.state.nameError), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 40\n      }\n    }, \"Password\")), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Enter Password\",\n      type: \"password\",\n      onChange: event => {\n        this.setState({\n          password: event.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, this.state.passwordError), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.submit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}","map":{"version":3,"sources":["D:/my-app/src/components/login.js"],"names":["React","Component","Redirect","Login","constructor","token","localStorage","getItem","loggedIn","state","name","password","nameError","passwordError","valid","includes","length","setState","submit","console","warn","request","email","log","fetch","method","headers","body","JSON","stringify","then","result","json","resp","alert","render","event","target","value","color"],"mappings":"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","sourcesContent":["// i did the basic form validation rage\r\n// Token authetication using local storage\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\"\r\nexport default class Login extends Component {\r\n    // state objects are initialized inside constructor\r\n    constructor() {\r\n        super();\r\n        const token = localStorage.getItem(\"token\")\r\n        let loggedIn = true\r\n        if (token == null) {\r\n            loggedIn = false\r\n        }\r\n        this.state = {\r\n            // initializing state of the component  using js objects which store informattion about the component\r\n            name: \"\",\r\n            password: \"\",\r\n            nameError: \"\",\r\n            passwordError: \"\",\r\n            loggedIn: \"\"\r\n        }\r\n    }\r\n\r\n    // valid func for applying basic validation rules against user input\r\n    valid() {\r\n        // if \"name\" object does'nt have \"@\" in his text & password lenght is less 6 then \r\n        if (!this.state.name.includes(\"@\") && this.state.password.length < 6) {\r\n            // then using setState property nameerror and password error object has error message value it\r\n            this.setState(\r\n                { nameError: \"invalid Eame\", passwordError: \"password lenght should be more than 5\" }\r\n            )\r\n        }\r\n        // if only \"name\" does'nt have @ char, set only value for nameError \r\n        else if (!this.state.name.includes(\"@\")) {\r\n            this.setState({ nameError: \"Invalid Email\" })\r\n        }\r\n        else if (this.state.password.length < 5) {\r\n            this.setState({ passwordError: \"password lenght should be more than 5\" })\r\n        }\r\n        else {\r\n            // return ture if all sorted\r\n            return true;\r\n        }\r\n    }\r\n    submit() {\r\n        this.setState({ nameError: \"\", passwordError: \"\" })\r\n        // to authenticate using local storage i set mock email & password. so you will only logged in using these values. \r\n        //  although valid function have conditions to check basic validation. \r\n        if (this.valid()) {\r\n            {\r\n                console.warn(\"state\", this.state)\r\n                let request = {\r\n\r\n                    email: this.state.name,\r\n                    password: this.state.password\r\n                }\r\n                console.log(request);\r\n                fetch('http://localhost:3002/api/users/login', {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n\r\n                    body: JSON.stringify(request)\r\n                }).then((result) => {\r\n                    result.json().then((resp) => {\r\n                        console.log(resp.token);\r\n                    })\r\n                })\r\n            }\r\n            alert(\"form has been submited\")\r\n\r\n\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.loggedIn) {\r\n            // redirected to admin component untill we are logged in\r\n            return <Redirect to={\"/Admin\"} />\r\n        }\r\n        return (\r\n            <div className=\"form\">\r\n                <h1>Login</h1>\r\n                <div className=\"label\"><label >Email Address</label></div>\r\n                {/* on changing the input field by user, that text value will be store in \"name\" object which store in constructor func using setstate property */}\r\n                <input placeholder=\"Enter Email\" type=\"text\" onChange={(event) => { this.setState({ name: event.target.value }) }} />\r\n                {/* eror message will displayed depending on value store in nameError object */}\r\n                <p style={{ color: \"red\" }}>{this.state.nameError}</p>\r\n                <div className=\"label\"><label>Password</label></div>\r\n                {/* same as above input field except object which is password in this case */}\r\n                <input placeholder=\"Enter Password\" type=\"password\" onChange={(event) => { this.setState({ password: event.target.value }) }} />\r\n                <p style={{ color: \"red\" }}>{this.state.passwordError}</p>\r\n                {/* on click submit button submit() fuction will call, it's define above */}\r\n                <button onClick={() => this.submit()}>Submit</button>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}